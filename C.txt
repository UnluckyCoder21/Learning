"""
Django settings for constructionpro project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

from dotenv import load_dotenv
load_dotenv(".env2")
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("django_secret_key", "fwevbsuio")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (True if os.getenv( "Debug" ) == 'True' else False)
# DEBUG = True

ALLOWED_HOSTS = ["*"]

# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split()
CORS_ORIGIN_ALLOW_ALL= False
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "").split()
CORS_ORIGIN_WHITELIST = os.getenv("CORS_ORIGIN_WHITELIST", "").split()
CORS_ALLOW_CREDENTIALS = (True if os.getenv( "CORS_ALLOW_CREDENTIALS" ) == 'True' else False)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'app',
    'rest_framework',
    'plotsale',
    'rest_framework.authtoken',
    "corsheaders",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
     "whitenoise.middleware.WhiteNoiseMiddleware",

    'django.contrib.sessions.middleware.SessionMiddleware',
     'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

      #  'GMS.middleware.RedirectUnauthorizedMiddleware',
     'constructionpro.middleware.APIKeyMiddleware' , # api middleware
]

EXTERNAL_API_KEY =os.getenv('EXTERNAL_API_KEY')

ROOT_URLCONF = 'constructionpro.urls'

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

TEMP_BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(TEMP_BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'app.context_processors.my_env_var',
            ],
        },

    #     "libraries": {
    #     "tags": "app.templatetags",
       
    # },
    },
]

JS_ENV = os.getenv('JS_ENV')

WSGI_APPLICATION = 'constructionpro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


local_db =   {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }


prod_db =  {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv("psql_database"),
        'USER': os.getenv('psql_user'),
        'PASSWORD': os.getenv('psql_password'),
        'HOST': os.getenv('psql_host'),
        'PORT': os.getenv('psql_port'),
    }

# Production = (os.getenv('PROD_DB'))

# Production = os.getenv('PRODUCTION', 'False').lower() in ('true', '1', 't')

# print(type(Production),Production ==0,Production)

DATABASES = {
    'default': prod_db 
}

print(os.getenv("psql_database"))


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.getenv("psql_database"),
#         'USER': os.getenv('psql_user'),
#         'PASSWORD': os.getenv('psql_password'),
#         'HOST': os.getenv('psql_host'),
#         'PORT': os.getenv('psql_port'),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

import os 

STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'



STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
    ]


# MEDIA_URL =f'{os.getenv("MEDIA_URL")}media/'
MEDIA_URL="/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = "app.CustomUser"



# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.TokenAuthentication',  
#     ],

#     'DEFAULT_PERMISSION_CLASSES':(
#                 'rest_framework.permissions.IsAuthenticated',
#     ),
# }



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  

# browser auth
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',  
    ],

    'DEFAULT_PERMISSION_CLASSES':(
                'rest_framework.permissions.IsAuthenticated',
    ),
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'



DATE_FORMAT = "%Y-%m-%d"


# ALLOW_ALL_ORIGINS =True

CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST", 
    "PUT",
)
CORS_ALLOW_HEADERS = (
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
)


CORS_ALLOW_ALL_ORIGINS = True 
CORS_ALLOW_CREDENTIALS = True






# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_HOST = 'smtp.gmail.com' 
EMAIL_PORT = 587  
EMAIL_USE_TLS = True  
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL') 





# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'INFO',  
#             'class': 'logging.FileHandler',
#             'filename': 'myapp.log',  
#         },
#         'console': {
#             'level': 'INFO',  
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'WARNING',
#             'propagate': True,
#         },
#         'app': {  
#             'handlers': ['file', 'console'],
#             'level': 'DEBUG',  
#             'propagate': False,
#         },
#     },
# }
