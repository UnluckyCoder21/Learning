name=models.CharField(max_length=256)
    code =models.IntegerField(null=True,blank=True)
    limit= models.IntegerField(null=True,blank=True,default=1)

    def __str__(self):
        return self.name
    

class CompanyPlanLimits(models.Model):
    plan = models.ForeignKey(CompanyPlan,null=True,blank=True,on_delete=models.CASCADE)
    logo = models.IntegerField(null=True,blank=True)
    banner  = models.IntegerField(null=True,blank=True)
    active_banner =models.IntegerField(null=True,blank=True)
    employee = models.IntegerField(null=True,blank=True)
    customer = models.IntegerField(null=True,blank=True)
    documents = models.IntegerField(null=True,blank=True)


    def __str__(self) :
        if self.plan:
            return self.plan.display
        return f'{self.__class__.__name__} Object ({self.pk})'
    

    @classmethod
    def is_valid_asset(cls, limits_instance, asset_type_code):
        asset_type_fields = {
            0: 'logo',
            1: 'banner',
            2: 'active_banner',
          
        }
        if asset_type_code not in asset_type_fields:
            raise ValueError(f"Invalid asset type code: {asset_type_code}")

        field_name = asset_type_fields[asset_type_code]
        asset_count = getattr(limits_instance, field_name)

        # print(field_name,asset_count)
        return asset_count 




# --------------- directories ---------------------------

def user_directory_path(instance,filename):
   print(instance.type)
   path='company/{0}/{1}_{2}'.format(instance.company.name,instance.type.name,filename)
   return path


#------------------------------------------------------------------------- Company ---------------------------------------------------------------
# class Company(models.Model):
#     owner = models.ForeignKey(CustomUser,related_name="owner_company",null=True,blank=True,on_delete=models.CASCADE)
#     admin = models.ForeignKey(CustomUser,null=True,blank=True,on_delete=models.CASCADE)
#     name = models.CharField(max_length=500,null=True,blank=True)
#     email=models.CharField(max_length=500,null=True,blank=True)
#     phone=models.CharField(max_length=10, unique=True,null=True,blank=True)
#     address=models.TextField(null=True,blank=True)
#     gst = models.CharField(max_length=500,null=True,blank=True)
#     created_at = models.DateField(auto_now_add=True)
#     plan =models.ForeignKey(CompanyPlan,null=True,blank=True,on_delete=models.CASCADE)
#     monthly_working_days =models.IntegerField(null=True, blank=True)
#     monthly_paid_leaves =models.IntegerField(null=True, blank=True)

#     def __str__(self):
#         return self.name
    

#     @property
#     def stock(self):
#         if self.inventorystock_set.all():
#             return self.inventorystock_set.all()
#         return None 


#     def save(self, *args, **kwargs):
#         if not self.plan:
#             self.plan,_ =CompanyPlan.objects.get_or_create(code=0)
        
#         return  super().save(*args, **kwargs)

       
#     def __str__(self):
#         return str(self.name)
