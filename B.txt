CustomUser = get_user_model()

def login_admin(request):
    form = LoginForm()
    errors = {}
    
    if request.method == "POST":  
        form = LoginForm(request.POST)
        
        if form.is_valid():
            identifier = form.cleaned_data.get('identifier')
            password = form.cleaned_data['password']
            
            try:
                try:
                    validate_email(identifier)
                    is_email = True
                except ValidationError:
                    is_email = False
                
                if is_email:
                    user = CustomUser.objects.get(email=identifier)
                else:
                    user = CustomUser.objects.get(phone_number=identifier)
                
                if not user.admin:
                    errors["user"] = "You are not allowed to login"
                    return render(request, "login.html", {'form': form, 'errors': errors, 'cred': {"identifier": identifier, "password": password}})
                
                if user.check_password(password):
                    login(request, user)
                    return redirect("index")
                else:
                    errors['password'] = 'Invalid Password'
            except CustomUser.DoesNotExist:
                if is_email:
                    errors['identifier'] = 'Invalid Email Id'
                else:
                    errors['identifier'] = 'Invalid Phone Number'

        errors["user"] = "Enter Valid Credential"
        return render(request, "login.html", {'form': form, 'errors': errors})
    
    return render(request, "login.html", {'form': form, 'errors': errors})

class CustomLogoutView(LogoutView):
    next_page = reverse_lazy('login') 

    def dispatch(self, request, *args, **kwargs):
        if request.method == 'POST':
            return super().dispatch(request, *args, **kwargs)
        else:
            # Handle invalid method (GET, PUT, etc.) with a proper response
            from django.http import HttpResponseNotAllowed
            return HttpResponseNotAllowed(['POST'])

#--------------------- Dashboard Table ---------------------
